<Rat24F> ::= <Opt Function Definitions> @ <Opt Declaration List> <Statement List> @
<Opt Function Definitions> ::= <Function Definitions> | <Empty>
<Function Definitions> ::= <Function> | <Function> <Function Definitions>
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: KEYWORD, Lexeme: function
Token: IDENTIFIER, Lexeme: main
Token: SEPARATOR, Lexeme: {
<Opt Parameter List> ::= <Parameter List> | <Empty>
<Empty> ::= ε
Syntax Error: Expected token type SEPARATOR (Token: KEYWORD, Lexeme: integer)
<Opt Declaration List> ::= <Declaration List> | <Empty>
<Declaration List> ::= <Declaration> ; | <Declaration> ; <Declaration List>
<Declaration> ::= <Qualifier> <IDs>
<Qualifier> ::= integer | boolean | real
Token: KEYWORD, Lexeme: integer
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Token: IDENTIFIER, Lexeme: a
Token: SEPARATOR, Lexeme: ;
<Declaration> ::= <Qualifier> <IDs>
<Qualifier> ::= integer | boolean | real
Token: KEYWORD, Lexeme: integer
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Token: IDENTIFIER, Lexeme: b
Token: SEPARATOR, Lexeme: ;
<Body> ::= { <Statement List> }
Syntax Error: Expected token type SEPARATOR (Token: IDENTIFIER, Lexeme: a)
<Statement List> ::= <Statement> | <Statement> <Statement List>
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: IDENTIFIER, Lexeme: a
Token: OPERATOR, Lexeme: =
<Expression> ::= <Term> <Expression Prime>
<Term> ::= <Factor> <Term Prime>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: INTEGER, Lexeme: 5
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | ε
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | ε
Token: SEPARATOR, Lexeme: ;
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<Assign> ::= <Identifier> = <Expression> ;
Token: IDENTIFIER, Lexeme: b
Token: OPERATOR, Lexeme: =
<Expression> ::= <Term> <Expression Prime>
<Term> ::= <Factor> <Term Prime>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: IDENTIFIER, Lexeme: a
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | ε
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | ε
Token: OPERATOR, Lexeme: +
<Term> ::= <Factor> <Term Prime>
<Factor> ::= - <Primary> | <Primary>
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Token: INTEGER, Lexeme: 10
<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | ε
<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | ε
Token: SEPARATOR, Lexeme: ;
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
<If> ::= if ( <Condition> ) <Statement> fi | if ( <Condition> ) <Statement> else <Statement> fi
Token: KEYWORD, Lexeme: if
Token: SEPARATOR, Lexeme: (
